// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CheckInitParameters struct {

	// Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"customMessage,omitempty" tf:"custom_message,omitempty"`

	// Connection encryption.
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Expected IP. Valid only for dns check type.
	Expectedip *string `json:"expectedip,omitempty" tf:"expectedip,omitempty"`

	// Target host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Wheter to enable IPV6 on check. Default value is false.
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// Integration identifiers.
	// +listType=set
	Integrationids []*float64 `json:"integrationids,omitempty" tf:"integrationids,omitempty"`

	// Check name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// DNS server to use. Valid only for dns check type.
	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	// Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *float64 `json:"notifyagainevery,omitempty" tf:"notifyagainevery,omitempty"`

	// Notify when back up again.
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty" tf:"notifywhenbackup,omitempty"`

	// Password to auth with.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Whether the check is paused.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// Target port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server.
	Postdata *string `json:"postdata,omitempty" tf:"postdata,omitempty"`

	// Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are EU, NA, APAC, and LATAM. For example, "region: NA".
	Probefilters *string `json:"probefilters,omitempty" tf:"probefilters,omitempty"`

	// Custom HTTP header. The entry value should contain a one-element string array. The element should contain headerName and headerValue colon-separated. To add more than one header send other parameters named requestheaders{number}.
	// +mapType=granular
	Requestheaders map[string]*string `json:"requestheaders,omitempty" tf:"requestheaders,omitempty"`

	// How often should the check be tested? (minutes). Valid values are 1, 5, 15, 30, 60. Default value is 5.
	Resolution *float64 `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *float64 `json:"responsetimeThreshold,omitempty" tf:"responsetime_threshold,omitempty"`

	// Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if verify_certificate is set to false. It will appear provided verify_certificate is true and ssl_down_days_before value is greater than or equals 1. Default value is 0.
	SSLDownDaysBefore *float64 `json:"sslDownDaysBefore,omitempty" tf:"ssl_down_days_before,omitempty"`

	// Send notification when down X times. Default value is 2.
	Sendnotificationwhendown *float64 `json:"sendnotificationwhendown,omitempty" tf:"sendnotificationwhendown,omitempty"`

	// Target site should contain this string. Note! This parameter cannot be used together with the parameter shouldnotcontain, use only one of them in your request. Valid for http check.
	Shouldcontain *string `json:"shouldcontain,omitempty" tf:"shouldcontain,omitempty"`

	// Target site should NOT contain this string. Note! This parameter cannot be used together with the parameter shouldcontain, use only one of them in your request. Valid for http check.
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty" tf:"shouldnotcontain,omitempty"`

	// String to expect in response. Valid for tcp check.
	Stringtoexpect *string `json:"stringtoexpect,omitempty" tf:"stringtoexpect,omitempty"`

	// String to send. Valid for tcp check.
	Stringtosend *string `json:"stringtosend,omitempty" tf:"stringtosend,omitempty"`

	// List of tags for check. The maximum length of a tag is 64 characters.
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Teams to alert.
	// +listType=set
	Teamids []*float64 `json:"teamids,omitempty" tf:"teamids,omitempty"`

	// Type of check. Valid values are http, tcp, ping and dns.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Path to target on server.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Users to alert.
	// +listType=set
	Userids []*float64 `json:"userids,omitempty" tf:"userids,omitempty"`

	// Username to auth with.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Treat target site as down if an invalid/unverifiable certificate is found. Default value is true.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty" tf:"verify_certificate,omitempty"`
}

type CheckObservation struct {

	// Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"customMessage,omitempty" tf:"custom_message,omitempty"`

	// Connection encryption.
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Expected IP. Valid only for dns check type.
	Expectedip *string `json:"expectedip,omitempty" tf:"expectedip,omitempty"`

	// Target host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The check ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Wheter to enable IPV6 on check. Default value is false.
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// Integration identifiers.
	// +listType=set
	Integrationids []*float64 `json:"integrationids,omitempty" tf:"integrationids,omitempty"`

	// Check name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// DNS server to use. Valid only for dns check type.
	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	// Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *float64 `json:"notifyagainevery,omitempty" tf:"notifyagainevery,omitempty"`

	// Notify when back up again.
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty" tf:"notifywhenbackup,omitempty"`

	// Whether the check is paused.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// Target port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server.
	Postdata *string `json:"postdata,omitempty" tf:"postdata,omitempty"`

	// Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are EU, NA, APAC, and LATAM. For example, "region: NA".
	Probefilters *string `json:"probefilters,omitempty" tf:"probefilters,omitempty"`

	// Custom HTTP header. The entry value should contain a one-element string array. The element should contain headerName and headerValue colon-separated. To add more than one header send other parameters named requestheaders{number}.
	// +mapType=granular
	Requestheaders map[string]*string `json:"requestheaders,omitempty" tf:"requestheaders,omitempty"`

	// How often should the check be tested? (minutes). Valid values are 1, 5, 15, 30, 60. Default value is 5.
	Resolution *float64 `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *float64 `json:"responsetimeThreshold,omitempty" tf:"responsetime_threshold,omitempty"`

	// Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if verify_certificate is set to false. It will appear provided verify_certificate is true and ssl_down_days_before value is greater than or equals 1. Default value is 0.
	SSLDownDaysBefore *float64 `json:"sslDownDaysBefore,omitempty" tf:"ssl_down_days_before,omitempty"`

	// Send notification when down X times. Default value is 2.
	Sendnotificationwhendown *float64 `json:"sendnotificationwhendown,omitempty" tf:"sendnotificationwhendown,omitempty"`

	// Target site should contain this string. Note! This parameter cannot be used together with the parameter shouldnotcontain, use only one of them in your request. Valid for http check.
	Shouldcontain *string `json:"shouldcontain,omitempty" tf:"shouldcontain,omitempty"`

	// Target site should NOT contain this string. Note! This parameter cannot be used together with the parameter shouldcontain, use only one of them in your request. Valid for http check.
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty" tf:"shouldnotcontain,omitempty"`

	// String to expect in response. Valid for tcp check.
	Stringtoexpect *string `json:"stringtoexpect,omitempty" tf:"stringtoexpect,omitempty"`

	// String to send. Valid for tcp check.
	Stringtosend *string `json:"stringtosend,omitempty" tf:"stringtosend,omitempty"`

	// List of tags for check. The maximum length of a tag is 64 characters.
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Teams to alert.
	// +listType=set
	Teamids []*float64 `json:"teamids,omitempty" tf:"teamids,omitempty"`

	// Type of check. Valid values are http, tcp, ping and dns.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Path to target on server.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Users to alert.
	// +listType=set
	Userids []*float64 `json:"userids,omitempty" tf:"userids,omitempty"`

	// Username to auth with.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Treat target site as down if an invalid/unverifiable certificate is found. Default value is true.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty" tf:"verify_certificate,omitempty"`
}

type CheckParameters struct {

	// Custom message that will be added to email and webhook alerts.
	// +kubebuilder:validation:Optional
	CustomMessage *string `json:"customMessage,omitempty" tf:"custom_message,omitempty"`

	// Connection encryption.
	// +kubebuilder:validation:Optional
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Expected IP. Valid only for dns check type.
	// +kubebuilder:validation:Optional
	Expectedip *string `json:"expectedip,omitempty" tf:"expectedip,omitempty"`

	// Target host.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Wheter to enable IPV6 on check. Default value is false.
	// +kubebuilder:validation:Optional
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// Integration identifiers.
	// +kubebuilder:validation:Optional
	// +listType=set
	Integrationids []*float64 `json:"integrationids,omitempty" tf:"integrationids,omitempty"`

	// Check name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// DNS server to use. Valid only for dns check type.
	// +kubebuilder:validation:Optional
	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	// Notify again every n result. 0 means that no extra notifications will be sent.
	// +kubebuilder:validation:Optional
	Notifyagainevery *float64 `json:"notifyagainevery,omitempty" tf:"notifyagainevery,omitempty"`

	// Notify when back up again.
	// +kubebuilder:validation:Optional
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty" tf:"notifywhenbackup,omitempty"`

	// Password to auth with.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Whether the check is paused.
	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// Target port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server.
	// +kubebuilder:validation:Optional
	Postdata *string `json:"postdata,omitempty" tf:"postdata,omitempty"`

	// Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are EU, NA, APAC, and LATAM. For example, "region: NA".
	// +kubebuilder:validation:Optional
	Probefilters *string `json:"probefilters,omitempty" tf:"probefilters,omitempty"`

	// Custom HTTP header. The entry value should contain a one-element string array. The element should contain headerName and headerValue colon-separated. To add more than one header send other parameters named requestheaders{number}.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Requestheaders map[string]*string `json:"requestheaders,omitempty" tf:"requestheaders,omitempty"`

	// How often should the check be tested? (minutes). Valid values are 1, 5, 15, 30, 60. Default value is 5.
	// +kubebuilder:validation:Optional
	Resolution *float64 `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	// +kubebuilder:validation:Optional
	ResponsetimeThreshold *float64 `json:"responsetimeThreshold,omitempty" tf:"responsetime_threshold,omitempty"`

	// Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if verify_certificate is set to false. It will appear provided verify_certificate is true and ssl_down_days_before value is greater than or equals 1. Default value is 0.
	// +kubebuilder:validation:Optional
	SSLDownDaysBefore *float64 `json:"sslDownDaysBefore,omitempty" tf:"ssl_down_days_before,omitempty"`

	// Send notification when down X times. Default value is 2.
	// +kubebuilder:validation:Optional
	Sendnotificationwhendown *float64 `json:"sendnotificationwhendown,omitempty" tf:"sendnotificationwhendown,omitempty"`

	// Target site should contain this string. Note! This parameter cannot be used together with the parameter shouldnotcontain, use only one of them in your request. Valid for http check.
	// +kubebuilder:validation:Optional
	Shouldcontain *string `json:"shouldcontain,omitempty" tf:"shouldcontain,omitempty"`

	// Target site should NOT contain this string. Note! This parameter cannot be used together with the parameter shouldcontain, use only one of them in your request. Valid for http check.
	// +kubebuilder:validation:Optional
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty" tf:"shouldnotcontain,omitempty"`

	// String to expect in response. Valid for tcp check.
	// +kubebuilder:validation:Optional
	Stringtoexpect *string `json:"stringtoexpect,omitempty" tf:"stringtoexpect,omitempty"`

	// String to send. Valid for tcp check.
	// +kubebuilder:validation:Optional
	Stringtosend *string `json:"stringtosend,omitempty" tf:"stringtosend,omitempty"`

	// List of tags for check. The maximum length of a tag is 64 characters.
	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Teams to alert.
	// +kubebuilder:validation:Optional
	// +listType=set
	Teamids []*float64 `json:"teamids,omitempty" tf:"teamids,omitempty"`

	// Type of check. Valid values are http, tcp, ping and dns.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Path to target on server.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Users to alert.
	// +kubebuilder:validation:Optional
	// +listType=set
	Userids []*float64 `json:"userids,omitempty" tf:"userids,omitempty"`

	// Username to auth with.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Treat target site as down if an invalid/unverifiable certificate is found. Default value is true.
	// +kubebuilder:validation:Optional
	VerifyCertificate *bool `json:"verifyCertificate,omitempty" tf:"verify_certificate,omitempty"`
}

// CheckSpec defines the desired state of Check
type CheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckInitParameters `json:"initProvider,omitempty"`
}

// CheckStatus defines the observed state of Check.
type CheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Check is the Schema for the Checks API. Provides a Pingdom Check
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pingdom}
type Check struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   CheckSpec   `json:"spec"`
	Status CheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckList contains a list of Checks
type CheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Check `json:"items"`
}

// Repository type metadata.
var (
	Check_Kind             = "Check"
	Check_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Check_Kind}.String()
	Check_KindAPIVersion   = Check_Kind + "." + CRDGroupVersion.String()
	Check_GroupVersionKind = CRDGroupVersion.WithKind(Check_Kind)
)

func init() {
	SchemeBuilder.Register(&Check{}, &CheckList{})
}
