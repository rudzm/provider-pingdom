//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Check) DeepCopyInto(out *Check) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Check.
func (in *Check) DeepCopy() *Check {
	if in == nil {
		return nil
	}
	out := new(Check)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Check) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckInitParameters) DeepCopyInto(out *CheckInitParameters) {
	*out = *in
	if in.CustomMessage != nil {
		in, out := &in.CustomMessage, &out.CustomMessage
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(bool)
		**out = **in
	}
	if in.Expectedip != nil {
		in, out := &in.Expectedip, &out.Expectedip
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.Integrationids != nil {
		in, out := &in.Integrationids, &out.Integrationids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Nameserver != nil {
		in, out := &in.Nameserver, &out.Nameserver
		*out = new(string)
		**out = **in
	}
	if in.Notifyagainevery != nil {
		in, out := &in.Notifyagainevery, &out.Notifyagainevery
		*out = new(float64)
		**out = **in
	}
	if in.Notifywhenbackup != nil {
		in, out := &in.Notifywhenbackup, &out.Notifywhenbackup
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Paused != nil {
		in, out := &in.Paused, &out.Paused
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Postdata != nil {
		in, out := &in.Postdata, &out.Postdata
		*out = new(string)
		**out = **in
	}
	if in.Probefilters != nil {
		in, out := &in.Probefilters, &out.Probefilters
		*out = new(string)
		**out = **in
	}
	if in.Requestheaders != nil {
		in, out := &in.Requestheaders, &out.Requestheaders
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(float64)
		**out = **in
	}
	if in.ResponsetimeThreshold != nil {
		in, out := &in.ResponsetimeThreshold, &out.ResponsetimeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SSLDownDaysBefore != nil {
		in, out := &in.SSLDownDaysBefore, &out.SSLDownDaysBefore
		*out = new(float64)
		**out = **in
	}
	if in.Sendnotificationwhendown != nil {
		in, out := &in.Sendnotificationwhendown, &out.Sendnotificationwhendown
		*out = new(float64)
		**out = **in
	}
	if in.Shouldcontain != nil {
		in, out := &in.Shouldcontain, &out.Shouldcontain
		*out = new(string)
		**out = **in
	}
	if in.Shouldnotcontain != nil {
		in, out := &in.Shouldnotcontain, &out.Shouldnotcontain
		*out = new(string)
		**out = **in
	}
	if in.Stringtoexpect != nil {
		in, out := &in.Stringtoexpect, &out.Stringtoexpect
		*out = new(string)
		**out = **in
	}
	if in.Stringtosend != nil {
		in, out := &in.Stringtosend, &out.Stringtosend
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = new(string)
		**out = **in
	}
	if in.Teamids != nil {
		in, out := &in.Teamids, &out.Teamids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Userids != nil {
		in, out := &in.Userids, &out.Userids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VerifyCertificate != nil {
		in, out := &in.VerifyCertificate, &out.VerifyCertificate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckInitParameters.
func (in *CheckInitParameters) DeepCopy() *CheckInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckList) DeepCopyInto(out *CheckList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Check, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckList.
func (in *CheckList) DeepCopy() *CheckList {
	if in == nil {
		return nil
	}
	out := new(CheckList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckObservation) DeepCopyInto(out *CheckObservation) {
	*out = *in
	if in.CustomMessage != nil {
		in, out := &in.CustomMessage, &out.CustomMessage
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(bool)
		**out = **in
	}
	if in.Expectedip != nil {
		in, out := &in.Expectedip, &out.Expectedip
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.Integrationids != nil {
		in, out := &in.Integrationids, &out.Integrationids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Nameserver != nil {
		in, out := &in.Nameserver, &out.Nameserver
		*out = new(string)
		**out = **in
	}
	if in.Notifyagainevery != nil {
		in, out := &in.Notifyagainevery, &out.Notifyagainevery
		*out = new(float64)
		**out = **in
	}
	if in.Notifywhenbackup != nil {
		in, out := &in.Notifywhenbackup, &out.Notifywhenbackup
		*out = new(bool)
		**out = **in
	}
	if in.Paused != nil {
		in, out := &in.Paused, &out.Paused
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Postdata != nil {
		in, out := &in.Postdata, &out.Postdata
		*out = new(string)
		**out = **in
	}
	if in.Probefilters != nil {
		in, out := &in.Probefilters, &out.Probefilters
		*out = new(string)
		**out = **in
	}
	if in.Requestheaders != nil {
		in, out := &in.Requestheaders, &out.Requestheaders
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(float64)
		**out = **in
	}
	if in.ResponsetimeThreshold != nil {
		in, out := &in.ResponsetimeThreshold, &out.ResponsetimeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SSLDownDaysBefore != nil {
		in, out := &in.SSLDownDaysBefore, &out.SSLDownDaysBefore
		*out = new(float64)
		**out = **in
	}
	if in.Sendnotificationwhendown != nil {
		in, out := &in.Sendnotificationwhendown, &out.Sendnotificationwhendown
		*out = new(float64)
		**out = **in
	}
	if in.Shouldcontain != nil {
		in, out := &in.Shouldcontain, &out.Shouldcontain
		*out = new(string)
		**out = **in
	}
	if in.Shouldnotcontain != nil {
		in, out := &in.Shouldnotcontain, &out.Shouldnotcontain
		*out = new(string)
		**out = **in
	}
	if in.Stringtoexpect != nil {
		in, out := &in.Stringtoexpect, &out.Stringtoexpect
		*out = new(string)
		**out = **in
	}
	if in.Stringtosend != nil {
		in, out := &in.Stringtosend, &out.Stringtosend
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = new(string)
		**out = **in
	}
	if in.Teamids != nil {
		in, out := &in.Teamids, &out.Teamids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Userids != nil {
		in, out := &in.Userids, &out.Userids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VerifyCertificate != nil {
		in, out := &in.VerifyCertificate, &out.VerifyCertificate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckObservation.
func (in *CheckObservation) DeepCopy() *CheckObservation {
	if in == nil {
		return nil
	}
	out := new(CheckObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckParameters) DeepCopyInto(out *CheckParameters) {
	*out = *in
	if in.CustomMessage != nil {
		in, out := &in.CustomMessage, &out.CustomMessage
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(bool)
		**out = **in
	}
	if in.Expectedip != nil {
		in, out := &in.Expectedip, &out.Expectedip
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.Integrationids != nil {
		in, out := &in.Integrationids, &out.Integrationids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Nameserver != nil {
		in, out := &in.Nameserver, &out.Nameserver
		*out = new(string)
		**out = **in
	}
	if in.Notifyagainevery != nil {
		in, out := &in.Notifyagainevery, &out.Notifyagainevery
		*out = new(float64)
		**out = **in
	}
	if in.Notifywhenbackup != nil {
		in, out := &in.Notifywhenbackup, &out.Notifywhenbackup
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Paused != nil {
		in, out := &in.Paused, &out.Paused
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Postdata != nil {
		in, out := &in.Postdata, &out.Postdata
		*out = new(string)
		**out = **in
	}
	if in.Probefilters != nil {
		in, out := &in.Probefilters, &out.Probefilters
		*out = new(string)
		**out = **in
	}
	if in.Requestheaders != nil {
		in, out := &in.Requestheaders, &out.Requestheaders
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(float64)
		**out = **in
	}
	if in.ResponsetimeThreshold != nil {
		in, out := &in.ResponsetimeThreshold, &out.ResponsetimeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SSLDownDaysBefore != nil {
		in, out := &in.SSLDownDaysBefore, &out.SSLDownDaysBefore
		*out = new(float64)
		**out = **in
	}
	if in.Sendnotificationwhendown != nil {
		in, out := &in.Sendnotificationwhendown, &out.Sendnotificationwhendown
		*out = new(float64)
		**out = **in
	}
	if in.Shouldcontain != nil {
		in, out := &in.Shouldcontain, &out.Shouldcontain
		*out = new(string)
		**out = **in
	}
	if in.Shouldnotcontain != nil {
		in, out := &in.Shouldnotcontain, &out.Shouldnotcontain
		*out = new(string)
		**out = **in
	}
	if in.Stringtoexpect != nil {
		in, out := &in.Stringtoexpect, &out.Stringtoexpect
		*out = new(string)
		**out = **in
	}
	if in.Stringtosend != nil {
		in, out := &in.Stringtosend, &out.Stringtosend
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = new(string)
		**out = **in
	}
	if in.Teamids != nil {
		in, out := &in.Teamids, &out.Teamids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Userids != nil {
		in, out := &in.Userids, &out.Userids
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VerifyCertificate != nil {
		in, out := &in.VerifyCertificate, &out.VerifyCertificate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckParameters.
func (in *CheckParameters) DeepCopy() *CheckParameters {
	if in == nil {
		return nil
	}
	out := new(CheckParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckSpec) DeepCopyInto(out *CheckSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckSpec.
func (in *CheckSpec) DeepCopy() *CheckSpec {
	if in == nil {
		return nil
	}
	out := new(CheckSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckStatus) DeepCopyInto(out *CheckStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckStatus.
func (in *CheckStatus) DeepCopy() *CheckStatus {
	if in == nil {
		return nil
	}
	out := new(CheckStatus)
	in.DeepCopyInto(out)
	return out
}
